package com.vains.security.password;import java.time.Instant;import java.util.Collections;import java.util.Set;import org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;import org.springframework.security.oauth2.jwt.JwsHeader;import org.springframework.security.oauth2.jwt.JwtClaimsSet;import org.springframework.security.oauth2.server.authorization.client.RegisteredClient;import org.springframework.util.CollectionUtils;import org.springframework.util.StringUtils;/** * 生成Jwt工具类 * @author vains */public class JwtUtils {    private JwtUtils() {    }    public static JwsHeader.Builder headers() {        return JwsHeader.with(SignatureAlgorithm.RS256);    }    public static JwtClaimsSet.Builder accessTokenClaims(RegisteredClient registeredClient,                                                         String issuer, String subject, Set<String> authorizedScopes) {        Instant issuedAt = Instant.now();        Instant expiresAt = issuedAt.plus(registeredClient.getTokenSettings().getAccessTokenTimeToLive());        JwtClaimsSet.Builder claimsBuilder = JwtClaimsSet.builder();        if (StringUtils.hasText(issuer)) {            claimsBuilder.issuer(issuer);        }        claimsBuilder                .subject(subject)                .audience(Collections.singletonList(registeredClient.getClientId()))                .issuedAt(issuedAt)                .expiresAt(expiresAt)                .notBefore(issuedAt);        if (!CollectionUtils.isEmpty(authorizedScopes)) {            claimsBuilder.claim(OAuth2ParameterNames.SCOPE, authorizedScopes);        }        return claimsBuilder;    }}